# Mycogenomics Genome Assembly and Query Workflow
# Workflow to identify and compare target genes within small haplotype genomes.
# J. Blackwell, M. McDonald.
# University of Birmingham

#####################
### Initalisation ###
#####################

# Set the workflow configuaration file
configfile: "config/config.yml"

# Setting workflow settings
reads_dir = config["Reads_path"][0]
samples = config["Samples"]
queries = config["Queries"]

# Trimmomatic settings
adapters = config["Adapter_file"]
ADAPTER_OPTIONS = config["Adapter_options"]
TRIMMOMATIC_OPTIONS = config["Trimmomatic_options"]

# BLASTtoGFF settings
PERCENT_QUERY_COVERAGE = config["Percent_query_coverage"]


####################
### Target Rules ###
####################

rule target_default:
    input:
        expand("results/08_align/{query}_aligned.fasta",
        query=queries)

rule target_trim:
    input:
        expand("results/01_trim/{sample}_trimmed_1P.fastq",
        sample=samples)

rule target_assemble:
    input:
        expand("results/02_assemble/{sample}_assembled/scaffolds.fasta",
        sample=samples)

rule target_blastdb:
    input:
        expand("results/03_blastdb/{sample}_blastdb/{sample}_assembly.fasta",
        sample=samples)

rule target_search:
    input:
        expand("results/04_search/{query}/{query}_{sample}.txt",
        query=queries, sample=samples)

rule target_retrieve:
    input:
        expand("results/05_retrieve/{query}/{query}_{sample}_retrieved.fasta",
        query=queries, sample=samples)

rule target_condense:
    input:
        expand("results/07_combine/{query}_all.fasta",
        query=queries)

rule target_align:
    input:
        expand("results/08_align/{query}_aligned.fasta",
        query=queries)

######################
### Workflow Rules ###
######################

# Append fastq files split over multiple lanes
rule file_append:
    input:
        L1_R1=reads_dir + "{sample}_L001_R1.fastq.gz",
        L1_R2=reads_dir + "{sample}_L001_R2.fastq.gz",
        L2_R1=reads_dir + "{sample}_L002_R1.fastq.gz",
        L2_R2=reads_dir + "{sample}_L002_R2.fastq.gz"
    output:
        R1="results/00_append/{sample}_R1.fastq.gz",
        R2="results/00_append/{sample}_R2.fastq.gz"
    log:
        "logs/00_append/{sample}.log"
    shell:
        "cat {input.L2_R1} {input.L1_R1} > {output.R1} " # Append R1 lane 2 to lane 1
        "; "
        "cat {input.L2_R2} {input.L1_R2} > {output.R2}" # Append R2 lane 2 to lane 1


# Requires Java permission (important for clusters?)
# Need to switch to the java command?

# Trim fastq sequences
rule trimmomatic_trim:
    input:
        R1=reads_dir + "{sample}_R1.fastq.gz",
        R2=reads_dir + "{sample}_R2.fastq.gz",
        adapters=expand("resources/adapters/{adapter}", adapter=adapters)
    output:
        "results/01_trim/{sample}_trimmed_1P.fastq",
        "results/01_trim/{sample}_trimmed_1U.fastq",
        "results/01_trim/{sample}_trimmed_2P.fastq",
        "results/01_trim/{sample}_trimmed_2U.fastq"
    params:
        baseout="results/01_trim/{sample}_trimmed.fastq",
        adapt_op=ADAPTER_OPTIONS,
        trim_op=TRIMMOMATIC_OPTIONS
    conda:
        "envs/env_trimmomatic.yml"
    log:
        "logs/01_trim/{sample}.log"
    shell:
        "trimmomatic PE " # Core command
        "{input.R1} {input.R2} " # Inputs
        "-baseout {params.baseout} " # Output flag
        "ILLUMINACLIP:{input.adapters}{params.adapt_op} " # adapter sequence and options
        "{params.trim_op} " # Options
        "2> {log}" # log output

# Trim fastq sequences from alternate directory
rule trimmomatic_trim_lanes:
    input:
        R1="results/00_append/{sample}_R1.fastq.gz",
        R2="results/00_append/{sample}_R2.fastq.gz",
        adapters=expand("resources/adapters/{adapter}", adapter=adapters)
    output:
        "results/01_trim/{sample}_trimmed_1P.fastq",
        "results/01_trim/{sample}_trimmed_1U.fastq",
        "results/01_trim/{sample}_trimmed_2P.fastq",
        "results/01_trim/{sample}_trimmed_2U.fastq"
    params:
        baseout="results/01_trim/{sample}_trimmed.fastq",
        adapt_op=ADAPTER_OPTIONS,
        trim_op=TRIMMOMATIC_OPTIONS
    conda:
        "envs/env_trimmomatic.yml"
    log:
        "logs/01_trim/{sample}.log"
    shell:
        "trimmomatic PE " # Core command
        "{input.R1} {input.R2} " # Inputs
        "-baseout {params.baseout} " # Output flag
        "ILLUMINACLIP:{input.adapters}{params.adapt_op} " # adapter sequence and options
        "{params.trim_op} " # Options
        "2> {log}" # log output

# Assemble genome De Novo
rule spades_assembly:
    input:
        P1="results/01_trim/{sample}_trimmed_1P.fastq",
        P2="results/01_trim/{sample}_trimmed_2P.fastq",
        U1="results/01_trim/{sample}_trimmed_1U.fastq",
        U2="results/01_trim/{sample}_trimmed_2U.fastq"
    output:
        "results/02_assemble/{sample}_assembled/scaffolds.fasta"
    params:
        "results/02_assemble/{sample}_assembled/"
    conda:
        # not latest version but no major changes that impact the workflow
        "envs/env_spades.yml"
    log:
        "logs/02_assemble/{sample}.log"
    shell:
        "spades.py " # Core command
        "--pe1-1 {input.P1} --pe1-2 {input.P2} " # Paired foward and reverse reads
        "--pe1-s {input.U1} --pe1-s {input.U2} " # Unpaired forward and reverse reads
        "-o {params} " # output directory
        "2> {log}" # log

# Make a local blast database
rule blast_mkblastdb:
    input:
        "results/02_assemble/{sample}_assembled/scaffolds.fasta"
    output:
        dbdir=directory("results/03_blastdb/{sample}_blastdb/"),
        assembly="results/03_blastdb/{sample}_blastdb/{sample}_assembly.fasta"
    params:
        "results/03_blastdb/{sample}_blastdb/{sample}_assembly"
    conda:
        "envs/env_blast_plus.yml"
    log:
        makedb="logs/03_blastdb/{sample}_makedb.log",
        cpfasta="logs/03_blastdb/{sample}_cpfasta.log"
    shell:
        "makeblastdb " # Core command
        "-in {input} " # Input files
        "-dbtype nucl " # Database Options
        "-out {params} " # output directory
        "-logfile {log.makedb} " # log
        "; " # next shell command
        "cp {input} {output.assembly} " # copy fasta assembly
        "2> {log.cpfasta}" # log

# Query databases for genes of interest
rule blast_search:
    input:
        query="resources/query/{query}.fasta",
        blastdb="results/03_blastdb/{sample}_blastdb/"
    output:
        "results/04_search/{query}/{query}_{sample}.txt"
    params:
        blastdb="results/03_blastdb/{sample}_blastdb/{sample}_assembly",
        format="\"6 qseqid qlen sseqid sstart send qstart qend evalue bitscore length pident \""
    conda:
        "envs/env_blast_plus.yml"
    log:
        "logs/04_search/{query}_{sample}_search.log"
    shell:
        "blastn " # Core command
        "-db {params.blastdb} " # Database
        "-query {input.query} " # query
        "-outfmt {params.format} " # format
        "-out {output} " # output file
        "2> {log}" # log


# Retrieve blast hits from database
# In case of multiple hits, only first will be retrieved
rule blasttogff:
    input:
        inFasta="resources/query/{query}.fasta",
        refFasta="results/03_blastdb/{sample}_blastdb/{sample}_assembly.fasta",
        inBlast="results/04_search/{query}/{query}_{sample}.txt"
    output:
        outGff="results/05_retrieve/{query}/{query}_{sample}_retrieved.gff",
        outFasta="results/05_retrieve/{query}/{query}_{sample}_retrieved.fasta",
    params:
        centCover=PERCENT_QUERY_COVERAGE,
    conda:
        "envs/env_biopython.yml"
    log:
        "logs/05_retrieve/{query}_{sample}_retrieve.log"
    shell:
        "workflow/scripts/BLASTtoGFF.py " # Core command
        "-i {input.inFasta} " # Query fasta
        "-r {input.refFasta} " # Denovo assembly
        "-b {input.inBlast} " # Blast search result
        "-g {output.outGff} " # gff output
        "-o {output.outFasta} " # retreived sequence
        "-p {params.centCover} " # minimum percent result coverage
        "2> {log} " # log

# Identify directories to condense
rule helper_condense:
    input:
        expand("results/05_retrieve/{query}/{query}_{sample}_retrieved.fasta",
        query=queries, sample=samples)
    output:
        temp(directory("results/06_helper/{query}/"))
    params:
        "results/05_retrieve/{query}"
    log:
        "logs/06_helper/{query}_helper.log"
    shell:
        "cp -r {params} {output} 2> {log}" # Copy retreived fastas directory to new directroy


rule fasta_condense:
    input:
        "results/06_helper/{query}"
    output:
        "results/07_combine/{query}_all.fasta"
    log:
        "logs/07_combine/{query}_combine.log"
    shell:
        "cat {input}/*_retrieved.fasta > {output} 2> {log}" # Concatenate all retrieved fasta files.

# Align retreived sequences for each gene of interest.
# Comparison: doi: 10.1186/1748-7188-9-4
rule mafft_align:
    input:
        "results/07_combine/{query}_all.fasta"
    output:
        "results/08_align/{query}_aligned.fasta"
    log:
        "logs/08_align/{query}_align.log"
    conda:
        "envs/env_mafft.yml"
    shell:
        "mafft {input} > {output} "  # Core command
        "2> {log}"  # Log
